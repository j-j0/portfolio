# Simple CI with Google Cloud Artifact Registry
name: Build, Push, and Deploy Portfolio to Google Cloud

# Run on push to main branch and pull requests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Environment variables
env:
  NODE_VERSION: '22.3.0'
  # Google Cloud configuration
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: australia-southeast1
  GAR_REPOSITORY: portfolio-docker-repo
  IMAGE_NAME: portfolio
  # GKE Configuration
  GKE_CLUSTER_NAME: portfolio-cluster 
  GKE_CLUSTER_ZONE: australia-southeast1-a 
  K8S_DEPLOYMENT_NAME: frontend-deployment 

jobs:
  # Job 1: Test and Build (runs on all pushes and PRs)
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Get code from repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install packages
      run: npm ci
    
    - name: Run tests
      run: npm test -- --watchAll=false --passWithNoTests
      env:
        CI: true
    
    - name: Build React app
      run: npm run build
    
    - name: Test Docker build locally
      run: |
        docker build -t portfolio-test .
        echo "✅ Docker build successful!"

  # Job 2: Push to Google Cloud (only on main branch pushes)
  push-to-gcp:
    name: Push to Google Cloud
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
    - name: Get code from repository
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
    
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
    
    - name: Build and Push Portfolio Image
      run: |
        docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
        echo "✅ Successfully pushed portfolio image to Google Artifact Registry!"

  # Job 3: Deploy to GKE (only on main branch pushes, after pushing to GCP)
  deploy-to-gke:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: push-to-gcp # This job runs only after the image is successfully pushed
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Get code from repository
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    - name: Get GKE cluster credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ env.GKE_CLUSTER_NAME }}
        location: ${{ env.GKE_CLUSTER_ZONE }}

    - name: Deploy new image to GKE
      run: |
        # Update the image of our Kubernetes deployment to the new one we just built
        kubectl set image deployment/${{ env.K8S_DEPLOYMENT_NAME }} frontend-container=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Optional: Verify the rollout status
        kubectl rollout status deployment/${{ env.K8S_DEPLOYMENT_NAME }}